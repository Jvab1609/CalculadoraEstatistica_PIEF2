package calc;


import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Color;
import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.DoubleStream;
import javax.swing.JFrame;
import java.util.Arrays;
import javax.swing.WindowConstants;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author jvalb
 */
public class Calculadora extends javax.swing.JFrame {

    /**
     * Creates new form Calculadora
     */
    public Calculadora() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // Declaração de variáveis que serão utilizadas por múltiplos métodos.
    File arquivo = null;
    FileWriter writer = null;
    FileWriter writerShow = null;
    FileWriter writerHide = null;
    File historicoShow = new File("historicoCalculadoraSHOW.csv");
    File historicoHide = new File("historicoCalculadoraHIDE.csv");
    boolean tabelaFreq;
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox<>();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBox8 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton7 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem1.setText("Abrir novo arquivo");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Digitar dados");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText("Limpar dados");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        jMenuItem5.setText("Salvar no histórico");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        jMenuItem4.setText("Visualizar histórico");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculadora Estatística");
        setBackground(new java.awt.Color(0, 102, 204));
        setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1366, 768));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(0, 102, 204));

        jButton4.setBackground(new java.awt.Color(0, 102, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Abrir arquivo");
        jButton4.setBorderPainted(false);
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 102, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Digitar dados manualmente");
        jButton3.setBorderPainted(false);
        jButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(0, 102, 204));
        jButton9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("Histórico");
        jButton9.setBorderPainted(false);
        jButton9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1373, Short.MAX_VALUE))
        );

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaPeq0.png"))); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaPeq0.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaMini0.png"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaMini0.png"))); // NOI18N

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaMicro0.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaXS0.png"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaXS0.png"))); // NOI18N

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaMini0.png"))); // NOI18N

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/calculagrimas0.png"))); // NOI18N

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calc/img/bolaXS0.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addGap(54, 54, 54)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel14))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)))
                .addGap(494, 494, 494))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(955, Short.MAX_VALUE)
                    .addComponent(jLabel12)
                    .addGap(770, 770, 770)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(1012, Short.MAX_VALUE)
                    .addComponent(jLabel16)
                    .addGap(804, 804, 804)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addComponent(jLabel8))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(jLabel15))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jLabel13))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jLabel11)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addGap(1335, 1335, 1335))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(197, 197, 197)
                                .addComponent(jLabel10))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(302, 302, 302)
                                .addComponent(jLabel7))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(399, 399, 399)
                    .addComponent(jLabel12)
                    .addContainerGap(1604, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(622, 622, 622)
                    .addComponent(jLabel16)
                    .addContainerGap(1472, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("tab3", jPanel2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setEditable(false);

        jLabel1.setText("Arquivo aberto:");

        jLabel2.setText("Delimitador:");

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText(";");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setText("Carregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("Selecionar outro");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Primeira linha como nome das colunas");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton6.setText("Salvar no histórico");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jCheckBox3.setText("Formato tabela de frequência");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox4.setText("Mediana");

        jCheckBox5.setText("Média");

        jCheckBox6.setText("Moda");

        jLabel4.setText("Coluna:");

        jButton11.setText("Fazer operações");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jCheckBox8.setText("Desvio Padrão");
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Xi", "Fi"
            }
        ));
        jTable4.setShowGrid(true);
        jScrollPane5.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        jCheckBox9.setText("Coeficiente de variação");
        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox9ActionPerformed(evt);
            }
        });

        jCheckBox7.setText("Construir tabela de frequência");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField1)
                            .addGap(18, 18, 18)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jCheckBox3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCheckBox1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)))
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox9)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox4)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox8))))
                    .addComponent(jCheckBox7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(531, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jCheckBox3))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox4)
                                    .addComponent(jCheckBox5)
                                    .addComponent(jCheckBox8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox6)
                                    .addComponent(jCheckBox9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(402, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", jPanel1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setShowGrid(true);
        jScrollPane2.setViewportView(jTable2);

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel5.setText("Número de colunas:");

        jLabel6.setText("Número de linhas:");

        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jCheckBox2.setText("Formato tabela de frequência");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jButton7.setText("Salvar no histórico");
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addGap(42, 42, 42)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(632, 632, 632)
                            .addComponent(jCheckBox2)
                            .addGap(18, 18, 18)
                            .addComponent(jButton2))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(962, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jButton2)
                    .addComponent(jCheckBox2))
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addContainerGap(407, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab2", jPanel3);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Tipo", "Operações", "Preview", "Data e horário"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setShowHorizontalLines(true);
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable3);

        jButton8.setText("Carregar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton10.setText("Limpar histórico");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10))
                .addContainerGap(835, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(451, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab4", jPanel4);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 1920, 1100));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jMenuBar1.setBackground(new java.awt.Color(0, 102, 204));

        jMenu3.setText("Início");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu1.setText("Dados");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Histórico");
        jMenu2.setToolTipText("");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        
     
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // Mostra o submenu quando o usuário clica em "Arquivo" no canto superior direito
        jPopupMenu1.show(this,10,40);
        if(jTabbedPane1.getSelectedIndex() != 3) {
            jMenuItem5.setEnabled(true);
            jMenuItem3.setEnabled(true);
        }
        else {
            jMenuItem5.setEnabled(false);
            jMenuItem3.setEnabled(false);
        }
    }//GEN-LAST:event_jMenu1MouseClicked
    
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    
    // Gerencia a criação da tabela para digitação manual de dados
    public void criarDigitar(int numLinha, int numCol) {
        if (jCheckBox2.isSelected() == true) {
            jSpinner1.setValue(2);
            jSpinner1.setEnabled(false);
            ((DefaultTableModel) jTable2.getModel()).setColumnCount(2);
            ((DefaultTableModel) jTable2.getModel()).setRowCount(numLinha);
            jTable2.getColumnModel().getColumn(0).setHeaderValue("Xi");
            jTable2.getColumnModel().getColumn(1).setHeaderValue("Fi");
            tabelaFreq = true;
        }
        else {
            jSpinner1.setEnabled(true);
            ((DefaultTableModel) jTable2.getModel()).setColumnCount(numCol);
            ((DefaultTableModel) jTable2.getModel()).setRowCount(numLinha);
            jTable2.getColumnModel().getColumn(0).setHeaderValue("A");
            jTable2.getColumnModel().getColumn(1).setHeaderValue("B");
            tabelaFreq = false;
        }
    }
    
    public void limparTela(javax.swing.JCheckBox medianaCheck,javax.swing.JCheckBox mediaCheck, javax.swing.JCheckBox modaCheck, javax.swing.JCheckBox desvioCheck, javax.swing.JCheckBox freqCheck, javax.swing.JTextArea areaTxt, javax.swing.JComboBox combo, javax.swing.JTable tabFreq, javax.swing.JCheckBox cvCheck, javax.swing.JPanel panelFreq, javax.swing.JButton salvarBtn) {
        javax.swing.JCheckBox[] checks = {medianaCheck, mediaCheck, modaCheck, desvioCheck, freqCheck, cvCheck};
        for (int i = 0; i < checks.length; i++) {
            if(checks[i].isSelected() == true) {
                checks[i].doClick();
            }
            checks[i].setEnabled(false);
        }
        areaTxt.setText("");
        combo.removeAllItems();
        operacoes = "";
        operacoesHide = "";
        jPanel5.setVisible(false);
        ((DefaultTableModel) tabFreq.getModel()).setRowCount(0);
        panelFreq.setVisible(false);
        salvarBtn.setEnabled(false);
        //tabFreq.setVisible(false);
    }
    
   
    
    // Executa a criação da tabela para digitação
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int numCol = (int) jSpinner1.getValue();
        int numLinha = (int) jSpinner2.getValue();
        jButton7.setEnabled(true);
        criarDigitar(numLinha,numCol);
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void itensCombo(javax.swing.JComboBox combo, javax.swing.JTable tabela, javax.swing.JCheckBox freqCheck) {
        jComboBox1.removeAllItems();
        if (tabelaFreq == false) {
            for (int i = 0; i < ((DefaultTableModel) tabela.getModel()).getColumnCount(); i++) {
                combo.addItem(((DefaultTableModel) tabela.getModel()).getColumnName(i));
            }
            combo.setEnabled(true);
            freqCheck.setEnabled(true);
        }
        else {
            combo.addItem(String.valueOf(tabela.getColumnModel().getColumn(0).getHeaderValue()));
            combo.setEnabled(false);
            freqCheck.setEnabled(false);
        }
        
    }
    
    public double[] selecaoColunas(javax.swing.JTable tabela) {
        String colunaSel = String.valueOf(jComboBox1.getSelectedItem());
        DefaultTableModel tabela1 = ((DefaultTableModel) tabela.getModel());
        double coluna[] = new double[tabela1.getRowCount()];
        int indiceColuna = 0;
        for (int i = 0; i < tabela1.getColumnCount(); i++) {
            if(colunaSel.equals(tabela1.getColumnName(i))){
                indiceColuna = i;
            }
        }
        
        for (int j = 0; j < coluna.length; j++) {
            coluna[j] = Double.parseDouble(((String) tabela.getValueAt(j, indiceColuna)).replace(",", "."));
           
        }
 
        return coluna;
    }
    public double[][] colunasFreq(javax.swing.JTable tabela) {
        DefaultTableModel tabela1 = ((DefaultTableModel) tabela.getModel());
        double[][] colunas = new double[2][tabela1.getRowCount()];
        for (int i = 0; i < tabela1.getRowCount(); i++) {
            colunas[0][i] = Double.parseDouble(((String) tabela.getValueAt(i, 0)).replace(",", "."));
            
        }
        for (int j = 0; j < tabela1.getRowCount(); j++) {
            colunas[1][j] = Double.parseDouble(((String) tabela.getValueAt(j, 1)).replace(",", "."));
            
        }
        return colunas;
    }
    
    public double media(double[] dados, double[][] dadosfreq) {
        
        if(tabelaFreq==true){
            double somafi = 0;
            double soma = 0;
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                somafi += dadosfreq[1][i];   
            }
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                    soma = soma +(dadosfreq[0][i]*dadosfreq[1][i]);                    
                }
                
            double resultado = soma/somafi;
            return resultado;
            
        }else{
            int contador = 0;
            double soma = 0;
        
            for (int i = 0; i < dados.length; i++) {
                 soma += dados[i];
                 contador +=1;
            }
            double resultado = soma/contador;
            return resultado;
        }
       
        
    }
    public double desviopadrao(double[] dados,double[][]dadosfreq ) {
        if (tabelaFreq==true){
            double somafi = 0;
            double somaxi = 0 ;
            
            for (int i = 0; i < dadosfreq[0].length; i++) {
               somaxi+= Math.pow((dadosfreq[0][i]-media(null, dadosfreq)),2);
               somafi += dadosfreq[1][i];
              
                
            }
            double variancia = somaxi/(somafi-1);
            double dv = Math.sqrt(variancia);
            return dv;
        }
        else{
            
            double somaxi = 0 ;
            
            for (int i = 0; i < dados.length; i++) {
               somaxi+= Math.pow((dados[i]-media(dados, null)),2);
               
              
                
            }
            
            double variancia = somaxi/(dados.length-1);
            
            double dv = Math.sqrt(variancia);
            return dv;
        }
        
    }
    
    public double moda(double[] dados, double[][]dadosfreq) {
        
        if (tabelaFreq==true){
            double maior = 0;
            double moda = 0;
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (dadosfreq[1][i]>maior){
                    maior = dadosfreq[1][i];
                    
                    moda = dadosfreq[0][i];
                
                }
                
                
            }
            
            return moda;
        }
        else{
            int contadorMax = 0;
            double moda = 0;
            for (int i = 0; i < dados.length; i++) {
                int contador = 0;
                for (int j = 0; j < dados.length; j++) {
                    if (dados[i]==dados[j]){
                        contador++;
                    
                    }
                    
                }
                if (contador>contadorMax){
                     moda = dados[i];
                    contadorMax = contador;
                }
                
            }
            return moda;
        }
        
    }
    public double mediana(double[] dados, double[][]dadosfreq) {
        
        if (tabelaFreq==true){
            double somafi = 0;
            double classemediana = 0;
             for (int i = 0; i < jTable1.getRowCount(); i++) {
                somafi += dadosfreq[1][i];
                
            }
             
            double md = somafi/2;
            somafi = 0;
            
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                somafi += dadosfreq[1][i];
                
                if (somafi>md){
                    classemediana = dadosfreq[0][i];
                    break;
                    
                }
                
            }
            
            
            double mediana = classemediana;
            return mediana;
        }
        else{
            double mediana = 0;
            if (dados.length%2!=0){
                mediana = dados[dados.length/2];
            }
            else {
             mediana = (dados[dados.length/2]+dados[(dados.length/2)-1])/2;
            }           
        return mediana;
       
        }
        
    }
    
    public void construirFreq (double[] dados, javax.swing.JTable tabelaPrinc, javax.swing.JTable tabFreq) {
        
        DefaultTableModel tabela2 = ((DefaultTableModel) tabFreq.getModel());
        tabela2.setRowCount(0);
        
        double[][] freqDados = new double[2][dados.length];
        //ArrayList<Double> da = new ArrayList<Double>();
        
        //ArrayList<Double> fr = new ArrayList<Double>();
        
        int contZeros = 0;
        for (int i = 0; i < freqDados[0].length; i++) {
            double num = dados[i];
            
            int contador = 0;
            if(DoubleStream.of(freqDados[0]).anyMatch(x -> x == num) == false ) {
                freqDados[0][i] = num;
                
                for (int j = 0; j < freqDados[0].length; j++) {
                    if(freqDados[0][i] == dados[j]){
                        contador++;
                    }
                }
                
            }
            if(num == 0.0) {
               for (int j = 0; j < i; j++) {
                    if(freqDados[0][j] == 0){
                        contZeros++;
                    }
               }
               if (contZeros == 0) {
                    freqDados[0][i] = 0;
                    
                    for (int j = 0; j < freqDados[0].length; j++) {
                        if(freqDados[0][i] == dados[j]){
                            contador++;
                        }
                    }
               }
            }

            //fr.add(Double.valueOf(contador));
            freqDados[1][i] = contador;
            
        }
        
        for (int i = 0; i < freqDados[0].length; i++) {
            for (int j = 0; j < freqDados[0].length -1; j++) {
                if (freqDados[0][j] > freqDados[0][j+1]) {
                    double menor = freqDados[0][j+1];
                    double menorFreq = freqDados[1][j+1];
                    freqDados[0][j+1] = freqDados[0][j];
                    freqDados[0][j] = menor;
                    freqDados[1][j+1] = freqDados[1][j];
                    freqDados[1][j] = menorFreq;
                }
            }
        }
        
      
        //System.out.println(da);
        //System.out.println(fr);
        for (int i = 0; i < freqDados[0].length; i++) {
            String[] linhaFreq = {String.valueOf(freqDados[0][i]),String.valueOf(freqDados[1][i])};
            //System.out.println(linhaFreq);
            if(freqDados[1][i] != 0) {
                tabela2.addRow(linhaFreq);
            }
            
        }
        
       
    }
    
    
    String operacoes = "";
    String operacoesHide = "";
    DecimalFormat df = new DecimalFormat("0.000");
   
    public void calcular(javax.swing.JCheckBox medianaCheck,javax.swing.JCheckBox mediaCheck, javax.swing.JCheckBox modaCheck, javax.swing.JCheckBox desvioCheck, javax.swing.JCheckBox freqCheck, javax.swing.JTextArea areaTxt, javax.swing.JCheckBox cvCheck) {
        try {
            areaTxt.setText("");
            operacoes = "";
            operacoesHide = "";
            double[] dados = selecaoColunas(jTable1);
            double[][] dadosfreq = colunasFreq(jTable1);


            if(medianaCheck.isSelected()&& tabelaFreq==false) {
                areaTxt.append("MEDIANA = "+df.format(mediana(dados, null))+"\n");
                operacoes += " Mediana;";
                operacoesHide +="a";
            }
            else if(medianaCheck.isSelected()&& tabelaFreq==true) {
                areaTxt.append("MEDIANA = "+df.format(mediana(null, dadosfreq))+"\n");
                operacoes += " Mediana;";
                operacoesHide +="a";
            }
            if(mediaCheck.isSelected()&&tabelaFreq==false) {
                areaTxt.append("MÉDIA = "+df.format(media(dados, null))+"\n");
                operacoes += " Média;";
                operacoesHide +="b";
            }
            else if(mediaCheck.isSelected()&&tabelaFreq==true) {
                areaTxt.append("MÉDIA = "+df.format(media(null, dadosfreq))+"\n");
                operacoes += " Média;";
                operacoesHide +="b";
            }

            if(modaCheck.isSelected()&& tabelaFreq==false) {
                areaTxt.append("MODA = "+df.format(moda(dados,null))+"\n");
                operacoes += " Moda;";
                operacoesHide +="c";
            }
            else if(modaCheck.isSelected()&&tabelaFreq==true) {
                areaTxt.append("MODA = "+df.format(moda(null,dadosfreq))+"\n");
                operacoes += " Moda;";
                operacoesHide +="c";
            }
            if(desvioCheck.isSelected()&&tabelaFreq==true) {
                areaTxt.append("DESVIO PADRÃO = "+df.format(desviopadrao(null, dadosfreq))+"\n");
                operacoes += " Desvio  padrão;";
                operacoesHide +="d";
            }
            else if(desvioCheck.isSelected()&&tabelaFreq==false) {
                areaTxt.append("DESVIO PADRÃO = "+df.format(desviopadrao(dados, null))+"\n");
                operacoes += " Desvio  padrão;";
                operacoesHide +="d";
            }
            if(freqCheck.isSelected()) {
                operacoes += " Tab. Freq.;";
                operacoesHide +="e";
                jPanel5.setVisible(true);
                construirFreq(dados, jTable1, jTable4);
            }
            else {
                jPanel5.setVisible(false);
            }
            if(cvCheck.isSelected()&&tabelaFreq==false) {
                areaTxt.append("COEF. DE VARIAÇÃO = "+df.format(desviopadrao(dados, null)/media(dados, null))+"\n");
                operacoes += " Coef. Var.;";
                operacoesHide +="f";
            }
            else if(cvCheck.isSelected()&&tabelaFreq==true) {
                areaTxt.append("MÉDIA = "+df.format(desviopadrao(null, dadosfreq)/media(null, dadosfreq))+"\n");
                operacoes += " Coef. Var.;";
                operacoesHide +="f";
            }
            
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "São aceitos apenas dados numéricos. Verifique o conjunto escolhido!",
                    "ERRO",
                    JOptionPane.ERROR_MESSAGE);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, 
                    e.getMessage(),
                    "ERRO",
                    JOptionPane.ERROR_MESSAGE);
        } 
    }
    

// Gerencia a escolha do arquivo a ser carregado
    public void escolherArquivo() {
        try {
            
            JFileChooser chooser = new JFileChooser();
            if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                arquivo = chooser.getSelectedFile();
                jTextField1.setText(arquivo.getAbsolutePath());
                jButton1.setEnabled(true);
                jCheckBox1.setEnabled(true);
                jTextField2.setEnabled(true);
                ((DefaultTableModel) jTable1.getModel()).setColumnCount(0);
                ((DefaultTableModel) jTable1.getModel()).setRowCount(0);
                jTabbedPane1.setSelectedIndex(1);
                limparTela(jCheckBox4, jCheckBox5, jCheckBox6, jCheckBox8, jCheckBox7, jTextArea1, jComboBox1, jTable4, jCheckBox9, jPanel5, jButton6);
                jMenuBar1.setVisible(true);
                //jTable4.setEnabled(false);
                //jTable4.setVisible(false);
                jButton11.setEnabled(false);
                jComboBox1.setEnabled(false);
            } 
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        }

    }
    
    // Lê o arquivo escolhido
    public void lerArquivo() {
        try {
            ((DefaultTableModel) jTable1.getModel()).setColumnCount(0);
            ((DefaultTableModel) jTable1.getModel()).setRowCount(0);
            FileReader reader = new FileReader(arquivo);
            BufferedReader bf = new BufferedReader(reader);
            String linha = bf.readLine();
            StringTokenizer tk = new StringTokenizer(linha, jTextField2.getText());
            
            
            int numCol = (int) tk.countTokens();
            if (jCheckBox3.isSelected() == true) {
                if (numCol == 2) {
                    tabelaFreq = true;
                }
                else {
                    tabelaFreq = false;
                    throw new Exception("O número de colunas do arquivo é diferente de 2. Impossível colocar no modelo tabela de frequência.");
                }
            }
            else {
                tabelaFreq = false;
            }
            
            if (jCheckBox1.isSelected() == true) {
                String colunas[] = new String [numCol];
                for (int i = 0; i < colunas.length; i++) {
                    colunas[i] = tk.nextToken();
                    ((DefaultTableModel) jTable1.getModel()).addColumn(colunas[i]);
                }
                linha = bf.readLine();
            }
            else {
                
                ((DefaultTableModel) jTable1.getModel()).setColumnCount(tk.countTokens());
                if (tabelaFreq == true) {
                    jTable1.getColumnModel().getColumn(0).setHeaderValue("Xi");
                    jTable1.getColumnModel().getColumn(1).setHeaderValue("Fi");
                }
            }
            
            String linhaRead[] = new String [numCol];
            while (linha != null) {
                tk = new StringTokenizer(linha, jTextField2.getText());
                for (int i = 0; i < linhaRead.length; i++) {
                    linhaRead[i] = tk.nextToken();
                }
                ((DefaultTableModel) jTable1.getModel()).addRow(linhaRead);
                
                linha = bf.readLine();
            }
            jButton11.setEnabled(true);
            jComboBox1.setEnabled(true);
            jCheckBox4.setEnabled(true);
            jCheckBox5.setEnabled(true);
            jCheckBox6.setEnabled(true);
            jCheckBox7.setEnabled(true);
            jCheckBox8.setEnabled(true);
            jButton6.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Salva as informações em ambos os arquivos de Histórico
    public int escreverHistorico(String operacoes, String operacoesHide) {
        try {
            writerShow = new FileWriter(historicoShow,true);
            writerHide = new FileWriter(historicoHide,true);
            UIManager.put("OptionPane.cancelButtonText", "Cancelar");
            UIManager.put("OptionPane.okButtonText", "OK");
            var nomeSave = JOptionPane.showInputDialog(this, "Nome do salvamento: ", "Salvar no histórico", JOptionPane.QUESTION_MESSAGE, null, null, DISPOSE_ON_CLOSE);
            boolean nomeDisp = true;
            if (nomeSave == null){
                
                throw new Exception("Salvamento cancelado!");
                
            }
            else {
                if(nomeSave.toString().equals("")) {
                    throw new Exception("O nome não pode ser nulo!");
                }    
                else {    
                    FileReader reader = new FileReader(historicoHide);
                    BufferedReader bf = new BufferedReader(reader);
                    String linhaHide = bf.readLine();
                    
                    
                    while (linhaHide != null) {
                        StringTokenizer tk = new StringTokenizer(linhaHide, "|");
                        String parametros[] = new String [tk.countTokens()];
                        for (int i = 0; i < tk.countTokens(); i++) {;
                            parametros[i] = tk.nextToken();
                            
                        }
                        if (nomeSave.toString().equals(parametros[0])) {
                                nomeDisp = false;                   
                                throw new Exception("O nome já está em uso.");
                                
                        }
                        linhaHide = bf.readLine();
                    }
                    
                    
                        
                   
                    if (nomeDisp == true) {
                        String nome = nomeSave.toString();
                        String tipoShow = null;
                        String tipoHide = null;
                        String previewShow = null;
                        String previewHide = null;
                        int colunasArquivo = 0;
                        int freq = 0;
                        if (operacoes.equals("")) {
                            operacoes = "Nenhuma";
                        }
                        if (operacoesHide.equals("")) {
                            operacoesHide = "#";
                        }

                        switch (jTabbedPane1.getSelectedIndex()) {
                            case 1:
                                tipoShow = "Arquivo aberto";
                                tipoHide = "arqv";
                                File arquivoAberto = arquivo; 
                                previewHide = arquivoAberto.getAbsolutePath();
                                previewShow = arquivoAberto.getName();
                                if (jCheckBox1.isSelected() == true) {
                                    colunasArquivo = 1;
                                }
                                else {
                                    colunasArquivo = 0;
                                }
                                if (jCheckBox3.isSelected() == true) {
                                    freq = 1;
                                }
                                else {
                                    freq = 0;
                                }

                                break;

                            case 2:
                                tipoShow = "Dados digitados";
                                tipoHide = "dados";
                                if (jCheckBox2.isSelected() == true) {
                                    freq = 1;
                                }
                                else {
                                    freq = 0;
                                }
                                previewShow = String.valueOf(((DefaultTableModel) jTable2.getModel()).getDataVector());

                                break;     
                        }

                        String linha = "";
                        String[] parametrosHide = {nome, tipoHide, operacoesHide, String.valueOf(colunasArquivo), String.valueOf(freq), String.valueOf(jComboBox1.getSelectedIndex())};
                        for (int i = 0; i < parametrosHide.length; i++) {

                            linha += parametrosHide[i];

                            if (i < parametrosHide.length-1) {
                                linha += "|";
                            }
                        }
                        writerHide.write(linha+"\n");

                        if (jTabbedPane1.getSelectedIndex() == 1) {
                            writerHide.write(previewHide+"\n");
                        }
                        else {
                            int n = ((DefaultTableModel) jTable2.getModel()).getRowCount();
                                int c = ((DefaultTableModel) jTable2.getModel()).getColumnCount();
                                for (int i = 0; i < n; i++) {
                                    linha = "";
                                    for (int j = 0; j < c; j++) {
                                        linha += jTable2.getValueAt(i, j);
                                        if(j < c-1) {
                                            linha += ";";
                                            // coloca o delimitador entre as strings, exceto para a última.
                                        }
                                        if (i == n-1 && j == c-1) {
                                            linha += "&zz";
                                        }

                                    }

                                    writerHide.write(linha+"\n");
                                }
                        }

                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");  
                        LocalDateTime atual = LocalDateTime.now();  
                        String data = dtf.format(atual);

                        linha = "";
                        String[] parametrosShow = {nome, tipoShow, operacoes, previewShow, data};
                        for (int i = 0; i < parametrosShow.length; i++) {
                            linha += parametrosShow[i];
                            if (i < parametrosShow.length-1) {
                                linha += "|";
                            }
                        }
                        writerShow.write(linha+"\n");
                        return 1;
                    }

                }
                
            }
            
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                writerShow.close();
                writerHide.close();
            } catch (IOException ex) {
                
            }
        }
        return 0;
    }
    
    // Exibe, em tabela, as informações armazenadas no arquivo que contém os dados de histórico a serem mostrados
    public void lerHistorico() {
        try {
            FileReader reader = new FileReader(historicoShow);
            BufferedReader bf = new BufferedReader(reader);
            String linha = bf.readLine();
            ((DefaultTableModel) jTable3.getModel()).setRowCount(0);
            ((DefaultTableModel) jTable2.getModel()).setRowCount(0);

            while(linha != null) {
                StringTokenizer tokens = new StringTokenizer(linha, "|");
                String row[] = new String[5];
                for (int i = 0; i < row.length; i++) {
                    row[i] = tokens.nextToken();
                }
                ((DefaultTableModel) jTable3.getModel()).insertRow(0,row);
                
                linha = bf.readLine();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Carrega as informações do arquivo que permanece oculto ao usuário, para o tipo de tabela escolhido
    public void carregarHistorico() {
        try {
            
            if (((DefaultTableModel) jTable3.getModel()).getRowCount() == 0) {
                throw new Exception("O histórico está vazio.");
            }
            int row = jTable3.getSelectedRow();
            if (row == -1) {
                throw new Exception("Nenhum salvamento selecionado.");
            }
            
          
            FileReader reader = new FileReader(historicoHide);
            BufferedReader bf = new BufferedReader(reader);
            String linha = bf.readLine();
            
            String nome = (String)jTable3.getValueAt(row, 0);
            StringTokenizer tk = new StringTokenizer(linha, "|");
            String parametros[] = new String [tk.countTokens()];
            while (linha != null) {
                if (linha.startsWith(nome)) {
                    tk = new StringTokenizer(linha, "|");
                    for (int i = 0; i < 6; i++) {
                        parametros[i] = tk.nextToken();
                    }
                    break;
                }
                else {
                    linha = bf.readLine();
                }
            }
            
            
            
            if (parametros[1].equals("arqv")) {
                linha = bf.readLine();
                jTabbedPane1.setSelectedIndex(1);
                jMenuBar1.setVisible(true);
                //jTable4.setEnabled(false);
                //jTable4.setVisible(false);
                arquivo = new File(linha);
                
                if (parametros[3].equals("1")) {
                    if(jCheckBox1.isSelected() == false) {
                        jCheckBox1.doClick();
                        tabelaFreq = true;
                        jCheckBox7.setEnabled(false);
                    }
                }
                else {
                    tabelaFreq = false;
                    jCheckBox7.setEnabled(true);
                    if(jCheckBox1.isSelected() == true) {
                        jCheckBox1.doClick();
                        
                    }
                }
                
                if (parametros[4].equals("1")) {
                    if(jCheckBox3.isSelected() == false) {
                        jCheckBox3.doClick();
                    }
                }
                else {
                    if(jCheckBox3.isSelected() == true) {
                        jCheckBox3.doClick();
                    }
                }
                
                jTextField1.setText(arquivo.getAbsolutePath());
                lerArquivo();
                
                // Checa mediana
                if (parametros[2].contains("a")) {
                if (jCheckBox4.isSelected() == false) {
                    jCheckBox4.doClick();
                }
                } else {
                    if (jCheckBox4.isSelected() == true) {
                        jCheckBox4.doClick();
                    }
                }
                // Checa média
                if (parametros[2].contains("b")) {
                    if (jCheckBox5.isSelected() == false) {
                        jCheckBox5.doClick();
                    }
                } else {
                    if (jCheckBox5.isSelected() == true) {
                        jCheckBox5.doClick();
                    }
                }
                if (parametros[2].contains("c")) {
                    if (jCheckBox6.isSelected() == false) {
                        jCheckBox6.doClick();
                    }
                } else {
                    if (jCheckBox6.isSelected() == true) {
                        jCheckBox6.doClick();
                    }
                }
                if (parametros[2].contains("d")) {
                    if (jCheckBox8.isSelected() == false) {
                        jCheckBox8.doClick();
                    }
                } else {
                    if (jCheckBox8.isSelected() == true) {
                        jCheckBox8.doClick();
                    }
                }
                if (parametros[2].contains("e")) {
                    if (jCheckBox7.isSelected() == false) {
                        jCheckBox7.doClick();
                        System.out.println("aaaaa");
                        
                    }
                } else {
                    if (jCheckBox7.isSelected() == true) {
                        jCheckBox7.doClick();
                    }
                }
                if (parametros[2].contains("f")) {
                    if (jCheckBox9.isSelected() == false) {
                        jCheckBox9.doClick();
                    }
                } else {
                    if (jCheckBox9.isSelected() == true) {
                        jCheckBox9.doClick();
                    }
                }
                
                if (parametros[2].equals("#")) {
                    if (jCheckBox4.isSelected() == true) {
                        jCheckBox4.doClick();
                    }
                    if (jCheckBox5.isSelected() == true) {
                        jCheckBox5.doClick();
                    }
                    if (jCheckBox6.isSelected() == true) {
                        jCheckBox6.doClick();
                    }
                    if (jCheckBox7.isSelected() == true) {
                        jCheckBox7.doClick();
                    }
                    if (jCheckBox8.isSelected() == true) {
                        jCheckBox8.doClick();
                    }
                    if (jCheckBox9.isSelected() == true) {
                        jCheckBox9.doClick();
                    }

                }
                
                
                
                
                
                itensCombo(jComboBox1, jTable1, jCheckBox7);
                
                jComboBox1.setSelectedIndex(Integer.parseInt(parametros[5]));
                calcular(jCheckBox4, jCheckBox5, jCheckBox6, jCheckBox8, jCheckBox7, jTextArea1, jCheckBox9);
            }
            else {
                jTabbedPane1.setSelectedIndex(2);
                jMenuBar1.setVisible(true);
                if (parametros[4].equals("1")) {
                    if(jCheckBox2.isSelected() == false) {
                        jCheckBox2.doClick();
                        tabelaFreq = true;
                    }
                }
                else {
                    if(jCheckBox2.isSelected() == true) {
                        jCheckBox2.doClick();
                        tabelaFreq = false;
                    }
                }
                linha = bf.readLine();
                tk = new StringTokenizer(linha, ";");
                String[] linhaRead = new String[tk.countTokens()];
               
                
                ((DefaultTableModel) jTable2.getModel()).setColumnCount(tk.countTokens());
                if (tabelaFreq == true) {
                    jTable2.getColumnModel().getColumn(0).setHeaderValue("Xi");
                    jTable2.getColumnModel().getColumn(1).setHeaderValue("Fi");
                }
                else {
                    jTable2.getColumnModel().getColumn(0).setHeaderValue("A");
                    jTable2.getColumnModel().getColumn(1).setHeaderValue("B");
                }
                int numLinhas = 0;
                
                boolean finalSeq = false;
                while (finalSeq == false) {
                    tk = new StringTokenizer(linha, ";");
                    for (int i = 0; i < linhaRead.length; i++) {
                        linhaRead[i] = tk.nextToken();
                        
                        if (linhaRead[i].endsWith("&zz")) {
                            linhaRead[i] = linhaRead[i].substring(0, linhaRead[i].length() - 3);
                            finalSeq = true;
                        }
                        
                    }
                    numLinhas +=1;
                    linha = bf.readLine();
                    ((DefaultTableModel) jTable2.getModel()).addRow(linhaRead); 
                }
                jSpinner1.setValue(((DefaultTableModel) jTable2.getModel()).getColumnCount());
                jSpinner2.setValue(((DefaultTableModel) jTable2.getModel()).getRowCount());
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    public void limparHistorico() {
        try {
            if (((DefaultTableModel) jTable3.getModel()).getRowCount() != 0) {
                UIManager.put("OptionPane.cancelButtonText", "Cancelar");
                UIManager.put("OptionPane.okButtonText", "OK");
                var nomeSave = JOptionPane.showInputDialog(this, "Não será possível recuperar os dados uma vez que o histórico seja deletado.\nPara confirmar a limpeza do histórico, digite 'LIMPAR' abaixo:", "Limpar histórico?", JOptionPane.WARNING_MESSAGE, null, null, DISPOSE_ON_CLOSE);
                if (nomeSave.toString().equals("LIMPAR")) {
                    writerShow = new FileWriter(historicoShow,false);
                    writerHide = new FileWriter(historicoHide,false);
                    writerHide.write("");
                    writerShow.write("");
                    writerHide.close();
                    writerShow.close();
                    
                }
            }
            else {
                throw new Exception("O histórico já está vazio.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        } 
        
    }
    
    
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Abre a tela de escolha de arquivo e muda de tela
        
        limparTela(jCheckBox4, jCheckBox5, jCheckBox6, jCheckBox8, jCheckBox7, jTextArea1, jComboBox1, jTable4, jCheckBox9, jPanel5, jButton6);
        UIManager.put("OptionPane.noButtonText", "Não");
        UIManager.put("OptionPane.yesButtonText", "Sim");
        //int indAtual = jTabbedPane1.getSelectedIndex();
        int dialogButton = JOptionPane.YES_NO_OPTION;
        if (jTabbedPane1.getSelectedIndex() != 0 && jTabbedPane1.getSelectedIndex() != 3) {
            int dialogResult = JOptionPane.showConfirmDialog (this, "Deseja abrir um novo arquivo?","Abrir arquivo?",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
            //if JOptionPane.showConfirmDialog(this, "tem certeza que quer voltar ao início?", "voltar ao início", WIDTH, HEIGHT, null);

                if(confirmacaoMudar(1) == 1) {
                    escolherArquivo();
                }
            }
        }
        else {
                    escolherArquivo();
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Muda para a digitação de dados e reseta a tabela
        if(confirmacaoMudar(2) == 1) {
            jSpinner1.setValue(0);
            jSpinner2.setValue(0);
            ((DefaultTableModel) jTable2.getModel()).setColumnCount(0);
            ((DefaultTableModel) jTable2.getModel()).setRowCount(0);
            jTabbedPane1.setSelectedIndex(2);
            jMenuBar1.setVisible(true);
            if(jCheckBox3.isSelected() == true) {
                    jCheckBox3.doClick();
            }
            if(jCheckBox1.isSelected() == true) {
                    jCheckBox1.doClick();
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Abre a tela de escolha de arquivo e muda de tela
        limparTela(jCheckBox4, jCheckBox5, jCheckBox6, jCheckBox8, jCheckBox7, jTextArea1, jComboBox1, jTable4, jCheckBox9, jPanel5, jButton6);
        escolherArquivo();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Lê o arquivo selecionado e transcreve os dados para a tabela
        try {
            lerArquivo();
            itensCombo(jComboBox1, jTable1, jCheckBox7);
            jCheckBox4.setEnabled(true);
            jCheckBox5.setEnabled(true);
            jCheckBox6.setEnabled(true);
            if(tabelaFreq != true) {
                jCheckBox7.setEnabled(true);
            }
            jCheckBox8.setEnabled(true);
            jCheckBox9.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), 
                    "ERRO", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Abre a tela de escolha de arquivo para trocar a seleção
        escolherArquivo();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Muda para a tela de digitação de dados
        jSpinner1.setValue(0);
        jSpinner2.setValue(0);
        ((DefaultTableModel) jTable2.getModel()).setColumnCount(0);
        ((DefaultTableModel) jTable2.getModel()).setRowCount(0);
        jTabbedPane1.setSelectedIndex(2);
        jMenuBar1.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Escreve as informações no histórico
        escreverHistorico(operacoes, operacoesHide);

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // Abre o submenu para abrir o histórico
        jPopupMenu2.show(this,10,40);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Muda para a tela de visualização de histórico e transcreve os dados salvos para a tabela
        if (confirmacaoMudar(3) == 1) {
            
            lerHistorico();
        }
        jMenuBar1.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

 
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // Coloca a tabela de digitação de dados na forma de tabela de frequência
        if (jCheckBox2.isSelected() == true) {
            jSpinner1.setValue(2);
            jSpinner1.setEnabled(false);
        }
        else {
            jSpinner1.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Escreve as informações no histórico
        escreverHistorico("********", "*******");
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Carrega os dados armazenados no arquivo oculto
        carregarHistorico();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        // Previne o spinner das linhas de tomar valores negativos
        int s2 = (int) jSpinner2.getValue();
        if (s2 < 0) {
            jSpinner2.setValue(0);
        }
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // Previne o spinner das colunas de tomar valores negativos
        int s1 = (int) jSpinner1.getValue();
        if (s1 < 0) {
            jSpinner1.setValue(0);
        }
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // Muda da tela inicial para o histórico
        jTabbedPane1.setSelectedIndex(3);
        jMenuBar1.setVisible(true);
        lerHistorico();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        UIManager.put("OptionPane.noButtonText", "Não");
        UIManager.put("OptionPane.yesButtonText", "Sim");
        int dialogButton = JOptionPane.YES_NO_OPTION;
        if (jTabbedPane1.getSelectedIndex() != 0) {
            int dialogResult = JOptionPane.showConfirmDialog (this, "Deseja voltar ao início?","Voltar ao início?",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
            //if JOptionPane.showConfirmDialog(this, "tem certeza que quer voltar ao início?", "voltar ao início", WIDTH, HEIGHT, null);
                if(jTabbedPane1.getSelectedIndex() == 1 || jTabbedPane1.getSelectedIndex() == 2) {
                    
                    confirmacaoMudar(0);
                    jMenuBar1.setVisible(false);
                        
                    
                }
                else {
                    jTabbedPane1.setSelectedIndex(0);
                }
               

            }
        }
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        limparHistorico();
        lerHistorico();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        calcular(jCheckBox4, jCheckBox5, jCheckBox6, jCheckBox8, jCheckBox7, jTextArea1, jCheckBox9);
        
    }//GEN-LAST:event_jButton11ActionPerformed
    
    public int confirmacaoMudar(int index) {
        // usar jTabbedPane1.getSelectedIndex(); para ver se ele está nas janelas de digitar dados (1 e 2) com if
        // se sim, executar esse método
        // se o usuário escolher salvar, chamar o método escreverHistorico(operacoes);
        UIManager.put("OptionPane.noButtonText", "Não");
        UIManager.put("OptionPane.yesButtonText", "Sim");
        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
        if(jTabbedPane1.getSelectedIndex() != 0 && jTabbedPane1.getSelectedIndex() !=3) {
            if (jButton6.isEnabled() || jButton7.isEnabled()) {
                int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog (this, "Deseja salvar antes de trocar de aba?","Salvar antes trocar?",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                    //System.exit(1);
                    if(escreverHistorico(operacoes, operacoesHide) == 1) {
                        jTabbedPane1.setSelectedIndex(index);
                        jButton6.setEnabled(false);
                    jButton7.setEnabled(false);
                        return 1;
                    }
                    else {
                        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                        jMenuBar1.setVisible(true);
                    }
                }
                else if (dialogResult == JOptionPane.NO_OPTION ) {
                    jTabbedPane1.setSelectedIndex(index);
                    jButton6.setEnabled(false);
                    jButton7.setEnabled(false);
                    return 1;
                    
                }
            }
            else {
                jTabbedPane1.setSelectedIndex(index);
                jButton6.setEnabled(false);
                jButton7.setEnabled(false);
                return 1;
            }
        } 
        else if (jTabbedPane1.getSelectedIndex() == 3) {
            jTabbedPane1.setSelectedIndex(index);
        }
            
        return 0;
    }
    
    
    
    public void confirmacaoFechar() {
        // usar jTabbedPane1.getSelectedIndex(); para ver se ele está nas janelas de digitar dados (1 e 2) com if
        // se sim, executar esse método
        // se o usuário escolher salvar, chamar o método escreverHistorico(operacoes);
        UIManager.put("OptionPane.noButtonText", "Não");
        UIManager.put("OptionPane.yesButtonText", "Sim");
        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
        if(jTabbedPane1.getSelectedIndex() != 0 && jTabbedPane1.getSelectedIndex() !=3 && (jButton6.isEnabled() || jButton7.isEnabled())) {
            int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (this, "Deseja salvar antes de fechar a janela?","Salvar antes de fechar?",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                //System.exit(1);
                if(escreverHistorico(operacoes, operacoesHide) == 1) {
                    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                }
                else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
                
                
                
                
            }
            else if (dialogResult == JOptionPane.NO_OPTION ) {
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
            else if (dialogResult == JOptionPane.CANCEL_OPTION){
                setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

            }
        } else {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (this, "Deseja fechar a janela?","Fechar janela?",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
            else {
                setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            }
        }
            
        
    }
    
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmacaoFechar();
        
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        jMenuBar1.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox9ActionPerformed

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
 
    }//GEN-LAST:event_jButton4MouseEntered

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        escreverHistorico(operacoes, operacoesHide);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox7ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculadora().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
